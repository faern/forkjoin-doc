initSidebarItems({"enum":[["AlgoStyle","Enum representing the style of the executed algorithm."],["ReduceStyle","Enum indicating what type of join function an `Algorithm` will use."],["ResultError","Enum indicating there was a problem fetching a result from a job."],["ResultReceiver","Enum describing what to do with results of `Task`s and `JoinBarrier`s."],["TaskResult","Return values from tasks. Represent a computed value or a fork of the algorithm."]],"struct":[["AlgoOnPool","A handle for a specific `Algorithm` running on a `ForkPool`. Acquired from `ForkPool::init_algorithm`."],["Algorithm","The representation of a specific algorithm to use the ForkJoin library."],["ForkPool","Main struct of the ForkJoin library. Represents a pool of threads implementing a work stealing algorithm."],["Job","The handle for a computation. Can be used to fetch results of the computation. Upon drop it will wait for the entire computation to complete if it's still executing. Algorithm termination is detected by the `try_recv` and `recv` methods returning a `ResultError`"],["JoinBarrier","Internal struct for receiving results from multiple subtasks in parallel"],["Task","Internal representation of a task."]],"type":[["TaskFun","Type definition of the main function in a task. Your task functions must have this signature"],["TaskJoin","Type definition of functions joining together forked results. Only used in `AlgoStyle::Reduce` algorithms with `ReduceStyle::NoArg`."],["TaskJoinArg","Similar to `TaskJoin` but takes an extra argument sent directly from the task in algorithms with `ReduceStyle::Arg`."]]});